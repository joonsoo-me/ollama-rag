name: Build and Publish Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 타입 체크 및 빌드 테스트 / Type check and build test
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code / 코드 체크아웃
        uses: actions/checkout@v4

      - name: Setup Node.js / Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies / 의존성 설치
        working-directory: ./app
        run: npm ci

      - name: Type check / 타입 체크
        working-directory: ./app
        run: npx tsc --noEmit

      - name: Build / 빌드
        working-directory: ./app
        run: npm run build

  # Docker 이미지 빌드 및 푸시 / Build and push Docker image
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code / 코드 체크아웃
        uses: actions/checkout@v4

      - name: Set up Docker Buildx / Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry / 컨테이너 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata / 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image / Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate image summary / 이미지 요약 생성
        run: |
          echo "## Docker Image Built and Published 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull the latest image / 최신 이미지 가져오기" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run the container / 컨테이너 실행" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d \\" >> $GITHUB_STEP_SUMMARY
          echo "  --name ollama-rag-gateway \\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 11434:11434 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e OLLAMA_URL=http://ollama:11434 \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Security scan / 보안 스캔 (현재 비활성화)
  # security-scan:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'pull_request'
  #   
  #   env:
  #     REGISTRY: ghcr.io
  #     IMAGE_NAME: ${{ github.repository }}
  #   
  #   steps:
  #     - name: Run Trivy vulnerability scanner / Trivy 취약점 스캔 실행
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #       continue-on-error: true
  # 
  #     - name: Upload Trivy scan results / Trivy 스캔 결과 업로드
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always() && hashFiles('trivy-results.sarif') != ''
  #       with:
  #         sarif_file: 'trivy-results.sarif'